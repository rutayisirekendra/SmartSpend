import 'package:hive/hive.dart';

part 'note_model.g.dart'; // This file will be generated by build_runner

@HiveType(typeId: 2)
class Note extends HiveObject {
  @HiveField(0)
  final String id;

  @HiveField(1)
  final String userId;

  @HiveField(2)
  final String title;

  @HiveField(3)
  final String content;

  @HiveField(4)
  final DateTime createdAt;

  @HiveField(5)
  final DateTime updatedAt;

  @HiveField(6)
  final bool isImportant;

  @HiveField(7)
  final List<String> tags;

  @HiveField(8) // Add this new field
  final bool isCompleted;

  Note({
    required this.id,
    required this.userId,
    required this.title,
    required this.content,
    required this.createdAt,
    required this.updatedAt,
    this.isImportant = false,
    this.tags = const [],
    this.isCompleted = false, // Add default value
  });

  // Copy with method for updating notes
  Note copyWith({
    String? id,
    String? userId,
    String? title,
    String? content,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isImportant,
    List<String>? tags,
    bool? isCompleted, // Add this parameter
  }) {
    return Note(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      title: title ?? this.title,
      content: content ?? this.content,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isImportant: isImportant ?? this.isImportant,
      tags: tags ?? this.tags,
      isCompleted: isCompleted ?? this.isCompleted, // Include in copyWith
    );
  }

  // Convert to Map for Firebase
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'userId': userId,
      'title': title,
      'content': content,
      'createdAt': createdAt.millisecondsSinceEpoch,
      'updatedAt': updatedAt.millisecondsSinceEpoch,
      'isImportant': isImportant,
      'tags': tags,
      'isCompleted': isCompleted, // Add to map
    };
  }

  // Create from Map for Firebase
  factory Note.fromMap(Map<String, dynamic> map) {
    return Note(
      id: map['id'] ?? '',
      userId: map['userId'] ?? '',
      title: map['title'] ?? '',
      content: map['content'] ?? '',
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt']),
      updatedAt: DateTime.fromMillisecondsSinceEpoch(map['updatedAt']),
      isImportant: map['isImportant'] ?? false,
      tags: List<String>.from(map['tags'] ?? []),
      isCompleted: map['isCompleted'] ?? false, // Add from map
    );
  }
}